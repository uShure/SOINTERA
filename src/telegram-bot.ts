import TelegramBot from 'node-telegram-bot-api';
import { PrismaClient } from '@prisma/client';
import { FreeVoiceSalesAgent } from './lib/ai/free-voice-sales-agent.js';
import * as dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';
import { createWriteStream } from 'fs';
import { format } from 'util';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

const prisma = new PrismaClient();

// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const logsDir = path.join(process.cwd(), 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir);
}

// –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
const logFile = createWriteStream(path.join(logsDir, `app-${new Date().toISOString().split('T')[0]}.log`), { flags: 'a' });
const errorFile = createWriteStream(path.join(logsDir, `error-${new Date().toISOString().split('T')[0]}.log`), { flags: 'a' });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = (level, message, ...args) => {
  const timestamp = new Date().toISOString();
  const formattedMessage = format(`[${timestamp}] [${level}] ${message}`, ...args);

  // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
  if (level === 'ERROR') {
    console.error(formattedMessage);
  } else {
    console.log(formattedMessage);
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
  if (level === 'ERROR') {
    errorFile.write(formattedMessage + '\n');
  }
  logFile.write(formattedMessage + '\n');
};

class TelegramBotService {
  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    this.bot = new TelegramBot(token, {
      polling: {
        interval: 300,
        autoStart: true,
        params: {
          timeout: 10
        }
      }
    });

    this.salesAgent = new FreeVoiceSalesAgent();
    this.activeConversations = new Map();
    this.isRunning = false;
    this.messagesProcessed = 0;
    this.sessionStartTime = new Date();
    this.processedMessages = new Set(); // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  }

  async start() {
    log('INFO', 'üöÄ –ó–∞–ø—É—Å–∫ SOINTERA AI –ü—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ (Bot API)...');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    try {
      const me = await this.bot.getMe();
      log('INFO', `ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${me.username} (${me.first_name})`);
      log('INFO', `üìä ID –±–æ—Ç–∞: ${me.id}`);
    } catch (error) {
¬† ¬† log('ERROR', '–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
¬† ¬† log('ERROR', 'Stack:', error.stack);
      log('ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      throw error;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, –∞—É–¥–∏–æ)
    this.bot.on('message', async (msg) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ
      if (msg.chat.type !== 'private') {
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (msg.text || msg.voice || msg.audio) {
        await this.handleMessage(msg);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
    this.bot.on('polling_error', (error) => {
      log('ERROR', 'Polling error:', error);
    });

    this.isRunning = true;
    this.sessionStartTime = new Date();

    log('INFO', '‚úÖ AI –ü—Ä–æ–¥–∞–∂–Ω–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è!');
    log('INFO', 'üì® –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
  }

  async handleMessage(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from?.id?.toString();
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    const messageKey = `${userId}_${msg.message_id}`;
    if (this.processedMessages.has(messageKey)) {
      log('WARN', `–î—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageKey}, –∏–≥–Ω–æ—Ä–∏—Ä—É—é`);
      return;
    }
    this.processedMessages.add(messageKey);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å –∏–ª–∏ –∞—É–¥–∏–æ
    let text = msg.text;
    let isVoiceMessage = false;
    let voiceBuffer: Buffer | undefined;
    
    // –õ–û–ì–ò–ö–ê –û–¢–í–ï–¢–û–í:
    // üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –¢–û–õ–¨–ö–û –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
    // üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–±–µ–∑ –≥–æ–ª–æ—Å–∞)

    if (!text && (msg.voice || msg.audio)) {
      // –≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      isVoiceMessage = true;
      log('INFO', `üé§ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: voice=${!!msg.voice}, audio=${!!msg.audio}`);
      
      try {
        // –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const fileId = msg.voice?.file_id || msg.audio?.file_id;
        log('INFO', `üé§ File ID: ${fileId}`);
        
        if (fileId) {
          const file = await this.bot.getFile(fileId);
          log('INFO', `üé§ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: ${file.file_path}`);
          
          const fileStream = await this.bot.getFileStream(fileId);
          
          // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
          const chunks: Buffer[] = [];
          for await (const chunk of fileStream) {
            chunks.push(chunk);
          }
          voiceBuffer = Buffer.concat(chunks);
          
          log('INFO', `üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º ${voiceBuffer.length} –±–∞–π—Ç`);
          log('INFO', `üé§ –ü–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç: ${voiceBuffer.slice(0, 100).toString('hex')}`);
        } else {
          log('ERROR', 'üé§ File ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } catch (error) {
        log('ERROR', '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }

    if (!userId || (!text && !isVoiceMessage)) return;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    const senderName = msg.from?.first_name || msg.from?.username || '–ö–ª–∏–µ–Ω—Ç';
    const username = msg.from?.username;

    log('INFO', `üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${senderName} (@${username || '–±–µ–∑ username'}): "${text}"`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (text === '/start') {
      const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç! üëã

–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤ SOINTERA.

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–•–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è —Å—Ç—Ä–∏—á—å —Å –Ω—É–ª—è"
‚Ä¢ "–£–∂–µ —Ä–∞–±–æ—Ç–∞—é –º–∞—Å—Ç–µ—Ä–æ–º, —Ö–æ—á—É –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"
‚Ä¢ "–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã"
‚Ä¢ "–ö–æ–≥–¥–∞ –±–ª–∏–∂–∞–π—à–µ–µ –æ—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?"

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—á—É —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º üòä`;
      
      await this.bot.sendMessage(chatId, welcomeMessage);
      return;
    }

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
      await this.bot.sendChatAction(chatId, 'typing');

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
      const customer = await this.getOrCreateCustomer(userId, msg.from);

      // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π –±–µ—Å–µ–¥—ã
      const conversationId = this.activeConversations.get(userId);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞
      log('DEBUG', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI...');
      
      let result;
      if (isVoiceMessage && voiceBuffer) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await this.salesAgent.processIncomingMessage(voiceBuffer, {
          telegramId: userId,
          username: customer.username || undefined,
          firstName: customer.firstName || undefined,
          classification: customer.classification || undefined,
          stage: customer.stage || undefined,
          conversationId: conversationId,
        }, true); // isVoice = true
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await this.salesAgent.processIncomingMessage(text, {
          telegramId: userId,
          username: customer.username || undefined,
          firstName: customer.firstName || undefined,
          classification: customer.classification || undefined,
          stage: customer.stage || undefined,
          conversationId: conversationId,
        }, false); // isVoice = false
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ—Å–µ–¥—É
      const messageToSave = isVoiceMessage ? `[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]` : text;
      const newConversationId = await this.salesAgent.saveConversation(
        customer.id,
        messageToSave,
        result.response,
        conversationId
      );

      this.activeConversations.set(userId, newConversationId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
      if (result.classification) {
        await prisma.customer.update({
          where: { id: customer.id },
          data: {
            classification: result.classification,
            stage: result.classification === 'ready_to_buy' ? 'ready_to_buy' : customer.stage,
            lastInteraction: new Date()
          }
        });
        log('INFO', `üìä –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${result.classification}`);
      }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      log('INFO', `ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç: "${result.response.substring(0, 100)}${result.response.length > 100 ? '...' : ''}"`);

      if (result.response && result.response !== '') {
        // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        if (isVoiceMessage && result.voiceResponse) {
          try {
            log('INFO', 'üé§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¢–û–õ–¨–ö–û –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
            log('INFO', `üé§ –¢–∏–ø —á–∞—Ç–∞: ${msg.chat.type}, ID —á–∞—Ç–∞: ${chatId}`);
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const tempVoicePath = await this.salesAgent.createTempAudioFile(result.voiceResponse);
            
            // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
              await this.bot.sendVoice(chatId, tempVoicePath, {
                caption: 'üé§ –û—Ç–≤–µ—Ç SOINTERA AI'
              });
              log('INFO', '‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)');
            } catch (voiceError) {
              log('WARN', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –∞—É–¥–∏–æ:', voiceError.message);
              
              // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
              try {
                await this.bot.sendAudio(chatId, tempVoicePath, {
                  caption: 'üé§ –û—Ç–≤–µ—Ç SOINTERA AI',
                  title: '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                  performer: 'SOINTERA AI',
                  duration: 30 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                });
                log('INFO', '‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –∞—É–¥–∏–æ (–∏–º–∏—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)');
              } catch (audioError) {
                log('WARN', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞—É–¥–∏–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç:', audioError.message);
                
                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                await this.bot.sendDocument(chatId, tempVoicePath, {
                  caption: 'üé§ –û—Ç–≤–µ—Ç SOINTERA AI (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)'
                });
                log('INFO', '‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç');
              }
            }
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await this.salesAgent.removeTempAudioFile(tempVoicePath);
            
          } catch (error) {
            log('ERROR', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            await this.sendLongMessage(chatId, result.response);
          }
        } else {
          // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
          log('INFO', 'üìù –û—Ç–ø—Ä–∞–≤–ª—è—é –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
          await this.sendLongMessage(chatId, result.response);
          
          // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!
          // –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        }
      } else {
        log('ERROR', '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞');
        await this.bot.sendMessage(chatId, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @natalylini');
      }
      
      this.messagesProcessed++;
      log('INFO', `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${this.messagesProcessed}`);

      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä, —É–≤–µ–¥–æ–º–ª—è–µ–º
      if (result.callManager && result.managerInfo) {
        log('INFO', `‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞! –ü–µ—Ä–µ–¥–∞—é @${process.env.MANAGER_USERNAME}`);
        await this.bot.sendMessage(chatId, 
          `‚ö†Ô∏è –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É @${process.env.MANAGER_USERNAME}, –æ–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.`
        );
      }

    } catch (error) {
      log('ERROR', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      try {
        await this.bot.sendMessage(chatId,
          '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä @natalylini —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        );
      } catch (sendError) {
        log('ERROR', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
      }
    }
  }

  async sendLongMessage(chatId, text) {
    const maxLength = 4096;
    
    if (text.length <= maxLength) {
      await this.bot.sendMessage(chatId, text);
      return;
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    const parts = [];
    let currentPart = '';
    const lines = text.split('\n');

    for (const line of lines) {
      if ((currentPart + '\n' + line).length > maxLength) {
        if (currentPart) {
          parts.push(currentPart);
          currentPart = line;
        } else {
          let remainingLine = line;
          while (remainingLine.length > maxLength) {
            parts.push(remainingLine.substring(0, maxLength));
            remainingLine = remainingLine.substring(maxLength);
          }
          if (remainingLine) {
            currentPart = remainingLine;
          }
        }
      } else {
        currentPart = currentPart ? currentPart + '\n' + line : line;
      }
    }

    if (currentPart) {
      parts.push(currentPart);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (const part of parts) {
      await this.bot.sendMessage(chatId, part);
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  async getOrCreateCustomer(telegramId, sender) {
    let customer = await prisma.customer.findUnique({
      where: { telegramId }
    });

    if (!customer) {
      log('INFO', `üìù –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç! –î–æ–±–∞–≤–ª—è—é –≤ –±–∞–∑—É...`);
      customer = await prisma.customer.create({
        data: {
          telegramId,
          username: sender.username || null,
          firstName: sender.first_name || null,
          lastName: sender.last_name || null,
          phoneNumber: null,
        }
      });
    }

    return customer;
  }

  async stop() {
    this.isRunning = false;
    log('INFO', '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI –ü—Ä–æ–¥–∞–∂–Ω–∏–∫–∞...');
    
    await this.bot.stopPolling();
    await prisma.$disconnect();
    log('INFO', 'üëã AI –ü—Ä–æ–¥–∞–∂–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

    logFile.end();
    errorFile.end();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function main() {
  const bot = new TelegramBotService();

  try {
    await bot.start();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    process.on('SIGINT', async () => {
      log('INFO', '–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (SIGINT)...');
      await bot.stop();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      log('INFO', '–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (SIGTERM)...');
      await bot.stop();
      process.exit(0);
    });

    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
    await new Promise(() => {});

  } catch (error) {
    log('ERROR', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    await bot.stop();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main().catch((error) => {
  log('ERROR', '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
  process.exit(1);
});
