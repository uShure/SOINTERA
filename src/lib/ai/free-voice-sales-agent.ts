import { SalesAgent } from './sales-agent';
import { FreeVoiceService } from '../voice/free-voice-service';

/**
 * üé§ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –≥–æ–ª–æ—Å–æ–≤–æ–π AI –ø—Ä–æ–¥–∞–∂–Ω–∏–∫ SOINTERA
 * 
 * –†–∞—Å—à–∏—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π SalesAgent –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:
 * - –û—Ç–≤–µ—á–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–ë–ï–°–ü–õ–ê–¢–ù–û —Å eSpeak)
 * - –ü–æ–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ë–ï–°–ü–õ–ê–¢–ù–û —Å Whisper)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å)
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
 * 
 * –ù–ï —Ç—Ä–µ–±—É–µ—Ç –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π!
 */
export class FreeVoiceSalesAgent extends SalesAgent {
  private voiceService: FreeVoiceService;
  private voiceEnabled: boolean = true;
  private autoVoiceResponse: boolean = true; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º

  constructor() {
    super();
    this.voiceService = new FreeVoiceService();
  }

  /**
   * üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
   */
  async processIncomingMessage(message: string | Buffer, context: CustomerContext, isVoice: boolean = false): Promise<{
    response: string;
    voiceResponse?: Buffer;
    callManager: boolean;
    classification?: string;
    managerInfo?: {
      customerName: string;
      customerUsername?: string;
      request: string;
      classification?: string;
    };
  }> {
    let textMessage = message as string;

    // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
    if (isVoice && Buffer.isBuffer(message)) {
      try {
        textMessage = await this.voiceService.speechToText(message);
        console.log('üéß –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ—á—å (Whisper):', textMessage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if (!textMessage || textMessage.trim() === '') {
          console.warn('Whisper –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç');
          textMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º?';
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
          context.isVoiceMessage = true;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ (Whisper):', error);
        textMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º?';
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π SalesAgent
    const result = await super.processMessage(textMessage, context);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º
    const shouldRespondWithVoice = this.shouldRespondWithVoice(context, result.response, isVoice);

    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –í–°–ï–ì–î–ê –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º
    if ((shouldRespondWithVoice || isVoice) && this.voiceEnabled) {
      try {
        console.log('üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç...');
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        const voiceBuffer = await this.generateVoiceResponse(result.response, context);
        result.voiceResponse = voiceBuffer;
        console.log('‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (eSpeak):', error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
        console.warn('‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç');
      }
    }

    return result;
  }

  /**
   * üó£Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å eSpeak
   */
  private async generateVoiceResponse(text: string, context: CustomerContext): Promise<Buffer> {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const voiceOptions = this.getVoiceOptionsForContext(context);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∞—É–¥–∏–æ —Å eSpeak
      let audioBuffer = await this.voiceService.textToSpeech(text, voiceOptions);
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è Telegram
      audioBuffer = await this.voiceService.optimizeForTelegram(audioBuffer);
      
      return audioBuffer;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (eSpeak):', error);
      throw error;
    }
  }

  /**
   * üé≠ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–ª–æ—Å–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private getVoiceOptionsForContext(context: CustomerContext): {
    voice: string;
    language: string;
    speed: number;
    pitch: number;
    volume: number;
  } {
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SOINTERA —Å eSpeak - –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
    const baseOptions = {
      voice: 'ru',
      language: 'ru',
      speed: 140, // –ù–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
      pitch: 48,  // –ë–æ–ª–µ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω
      volume: 95  // –ù–µ–º–Ω–æ–≥–æ —Ç–∏—à–µ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (context.classification === 'beginner') {
      // –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ - –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏ —á–µ—Ç—á–µ, –Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
      return {
        ...baseOptions,
        speed: 125,
        pitch: 46,
        volume: 98
      };
    } else if (context.classification === 'experienced') {
      // –î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö - —É–≤–µ—Ä–µ–Ω–Ω–æ, –Ω–æ –Ω–µ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ
      return {
        ...baseOptions,
        speed: 155,
        pitch: 50,
        volume: 92
      };
    } else if (context.classification === 'ready_to_buy') {
      // –î–ª—è –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø–æ–∫—É–ø–∫–µ - —ç–Ω–µ—Ä–≥–∏—á–Ω–æ, –Ω–æ —á–µ–ª–æ–≤–µ—á–Ω–æ
      return {
        ...baseOptions,
        speed: 150,
        pitch: 52,
        volume: 96
      };
    } else if (context.classification === 'interested') {
      // –î–ª—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö - –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
      return {
        ...baseOptions,
        speed: 135,
        pitch: 47,
        volume: 94
      };
    }

    return baseOptions;
  }

  /**
   * üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º
   */
  private shouldRespondWithVoice(context: CustomerContext, response: string, isVoiceMessage: boolean = false): boolean {
    if (!this.autoVoiceResponse) return false;

    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–º
    if (isVoiceMessage || context.isVoiceMessage) {
      return true;
    }

    // –í—Å–µ–≥–¥–∞ –≥–æ–ª–æ—Å–æ–º –¥–ª—è –≤–∞–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if (response.includes('–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä —Å –Ω—É–ª—è') || 
        response.includes('–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞') ||
        response.includes('–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ')) {
      return true;
    }

    // –ì–æ–ª–æ—Å–æ–º –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    if (response.length > 100) {
      return true;
    }

    // –ì–æ–ª–æ—Å–æ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
    if (response.includes('‚ÇΩ') || response.includes('—Ä—É–±')) {
      return true;
    }

    // –ì–æ–ª–æ—Å–æ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –¥–∞—Ç–∞–º–∏
    if (response.includes('—Å–µ–Ω—Ç—è–±—Ä—å') || response.includes('–æ–∫—Ç—è–±—Ä—å') || 
        response.includes('–Ω–æ—è–±—Ä—å') || response.includes('–¥–µ–∫–∞–±—Ä—å')) {
      return true;
    }

    return false;
  }

  /**
   * üé§ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
   */
  toggleVoice(enabled: boolean): void {
    this.voiceEnabled = enabled;
    console.log(`üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'} (eSpeak)`);
  }

  /**
   * üîÑ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
   */
  toggleAutoVoice(enabled: boolean): void {
    this.autoVoiceResponse = enabled;
    console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'} (eSpeak)`);
  }

  /**
   * üéµ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ eSpeak
   */
  async getAvailableVoices(): Promise<string[]> {
    return await this.voiceService.getAvailableVoices();
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
   */
  getVoiceStats() {
    return this.voiceService.getStats();
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  async cleanupVoice(): Promise<void> {
    await this.voiceService.cleanup();
  }

  /**
   * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async checkVoiceServicesAvailability(): Promise<{
    espeak: boolean;
    whisper: boolean;
    ffmpeg: boolean;
    allAvailable: boolean;
  }> {
    const availability = await this.voiceService.checkAvailability();
    
    return {
      ...availability,
      allAvailable: availability.espeak && availability.whisper && availability.ffmpeg
    };
  }

  /**
   * üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
   */
  async generatePersonalizedGreeting(context: CustomerContext): Promise<{
    text: string;
    voice?: Buffer;
  }> {
    const greeting = this.getPersonalizedGreeting(context);
    
    if (this.voiceEnabled) {
      try {
        const voiceBuffer = await this.generateVoiceResponse(greeting, context);
        return { text: greeting, voice: voiceBuffer };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (eSpeak):', error);
      }
    }

    return { text: greeting };
  }

  /**
   * üëã –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
   */
  private getPersonalizedGreeting(context: CustomerContext): string {
    const time = new Date().getHours();
    let timeGreeting = '';

    if (time >= 5 && time < 12) {
      timeGreeting = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
    } else if (time >= 12 && time < 18) {
      timeGreeting = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å';
    } else {
      timeGreeting = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
    }

    let nameGreeting = '';
    if (context.firstName) {
      nameGreeting = `, ${context.firstName}`;
    } else if (context.username) {
      nameGreeting = `, @${context.username}`;
    }

    return `${timeGreeting}${nameGreeting}! üëã 

–Ø - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —à–∫–æ–ª—ã –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ SOINTERA. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!

–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —è –ø–æ–Ω–∏–º–∞—é –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å Whisper –∏ eSpeak).

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`;
  }

  /**
   * üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å —ç–º–æ—Ü–∏—è–º–∏
   */
  async generateEmotionalVoiceResponse(text: string, emotion: 'friendly' | 'professional' | 'enthusiastic' | 'calm'): Promise<Buffer> {
    return await this.voiceService.generateEmotionalVoice(text, emotion);
  }

  /**
   * üë• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async generateCustomerVoiceResponse(text: string, customerType: 'beginner' | 'experienced' | 'interested' | 'ready_to_buy'): Promise<Buffer> {
    return await this.voiceService.generateCustomerVoice(text, customerType);
  }

  /**
   * üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Bot API
   */
  async createTempAudioFile(audioBuffer: Buffer, filename?: string): Promise<string> {
    return await this.voiceService.createTempAudioFile(audioBuffer, filename);
  }

  /**
   * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
   */
  async removeTempAudioFile(filePath: string): Promise<void> {
    await this.voiceService.removeTempAudioFile(filePath);
  }

  /**
   * üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
   */
  async setupVoiceService(): Promise<{
    success: boolean;
    message: string;
    details: any;
  }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
      const availability = await this.checkVoiceServicesAvailability();
      
      if (availability.allAvailable) {
        return {
          success: true,
          message: '‚úÖ –í—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã!',
          details: availability
        };
      } else {
        const missing = [];
        if (!availability.espeak) missing.push('eSpeak-ng');
        if (!availability.whisper) missing.push('Whisper');
        if (!availability.ffmpeg) missing.push('FFmpeg');
        
        return {
          success: false,
          message: `‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${missing.join(', ')}`,
          details: availability
        };
      }
    } catch (error) {
      return {
        success: false,
        message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
        details: { error: error.message }
      };
    }
  }

  /**
   * üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
   */
  getInstallationInstructions(): string {
    return `
üé§ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ SOINTERA AI

–î–ª—è —Ä–∞–±–æ—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:

1. eSpeak-ng (Text-to-Speech):
   macOS: brew install espeak-ng
   Ubuntu: sudo apt install espeak-ng
   Windows: —Å–∫–∞—á–∞—Ç—å —Å https://github.com/espeak-ng/espeak-ng/releases

2. Whisper (Speech-to-Text):
   pip install openai-whisper
   
3. FFmpeg (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ):
   macOS: brew install ffmpeg
   Ubuntu: sudo apt install ffmpeg
   Windows: —Å–∫–∞—á–∞—Ç—å —Å https://ffmpeg.org/download.html

–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:
bun run voice:test

–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. VOICE_SETUP.md
    `.trim();
  }
}
