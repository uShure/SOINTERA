import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export interface ABTestVariant {
  name: string;
  prompt: string;
  weight: number; // –ø—Ä–æ—Ü–µ–Ω—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
}

export interface ABTestResult {
  variant: string;
  participants: number;
  conversions: number;
  conversionRate: number;
  significance: number;
}

export class ABTestingService {
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ A/B —Ç–µ—Å—Ç–∞
  async createABTest(
    name: string,
    description: string,
    variants: ABTestVariant[]
  ): Promise<string> {
    try {
      const test = await prisma.aBTest.create({
        data: {
          name,
          description,
          variantA: variants[0]?.prompt || '',
          variantB: variants[1]?.prompt || '',
          variantC: variants[2]?.prompt || null,
          trafficSplit: variants.map(v => v.weight).join(','),
          isActive: true
        }
      });

      console.log(`üß™ A/B Test created: ${name} (ID: ${test.id})`);
      return test.id;
    } catch (error) {
      console.error('Error creating A/B test:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  async getVariantForCustomer(customerId: string, testName?: string): Promise<{
    variant: string;
    prompt: string;
    testId: string;
  }> {
    try {
      // –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
      const test = testName
        ? await prisma.aBTest.findFirst({
            where: { name: testName, isActive: true }
          })
        : await prisma.aBTest.findFirst({
            where: { isActive: true },
            orderBy: { createdAt: 'desc' }
          });

      if (!test) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç
        return {
          variant: 'A',
          prompt: this.getDefaultPrompt(),
          testId: 'default'
        };
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ customerID
      const variant = this.assignVariant(customerId, test);
      const prompt = this.getPromptForVariant(test, variant);

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await this.incrementParticipant(test.id, variant);

      return {
        variant,
        prompt,
        testId: test.id
      };
    } catch (error) {
      console.error('Error getting variant:', error);
      return {
        variant: 'A',
        prompt: this.getDefaultPrompt(),
        testId: 'default'
      };
    }
  }

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
  private assignVariant(customerId: string, test: any): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º hash –æ—Ç customerId –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const hash = this.hashString(customerId);
    const splits = test.trafficSplit.split(',').map(Number);

    const totalWeight = splits.reduce((sum, weight) => sum + weight, 0);
    const normalized = hash % totalWeight;

    let cumulative = 0;
    if (normalized < (cumulative += splits[0])) return 'A';
    if (normalized < (cumulative += splits[1])) return 'B';
    if (splits[2] && normalized < (cumulative += splits[2])) return 'C';

    return 'A'; // fallback
  }

  // –ü—Ä–æ—Å—Ç–∞—è hash —Ñ—É–Ω–∫—Ü–∏—è
  private hashString(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
  private getPromptForVariant(test: any, variant: string): string {
    switch (variant) {
      case 'A': return test.variantA;
      case 'B': return test.variantB;
      case 'C': return test.variantC || test.variantA;
      default: return test.variantA;
    }
  }

  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  private async incrementParticipant(testId: string, variant: string): Promise<void> {
    const updateField = variant === 'A' ? 'participantsA' :
                       variant === 'B' ? 'participantsB' : 'participantsC';

    await prisma.aBTest.update({
      where: { id: testId },
      data: { [updateField]: { increment: 1 } }
    });
  }

  // –§–∏–∫—Å–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  async recordConversion(customerId: string, testId: string, variant: string): Promise<void> {
    try {
      if (testId === 'default') return;

      const updateField = variant === 'A' ? 'conversionsA' :
                         variant === 'B' ? 'conversionsB' : 'conversionsC';

      await prisma.aBTest.update({
        where: { id: testId },
        data: { [updateField]: { increment: 1 } }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º conversion rate
      await this.updateConversionRates(testId);

      console.log(`üìà Conversion recorded: ${variant} for test ${testId}`);
    } catch (error) {
      console.error('Error recording conversion:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ conversion rates
  private async updateConversionRates(testId: string): Promise<void> {
    const test = await prisma.aBTest.findUnique({ where: { id: testId } });
    if (!test) return;

    const conversionRateA = test.participantsA > 0 ? test.conversionsA / test.participantsA : 0;
    const conversionRateB = test.participantsB > 0 ? test.conversionsB / test.participantsB : 0;
    const conversionRateC = test.participantsC > 0 ? test.conversionsC / test.participantsC : 0;

    await prisma.aBTest.update({
      where: { id: testId },
      data: {
        conversionRateA,
        conversionRateB,
        conversionRateC
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
  async getTestResults(testId: string): Promise<ABTestResult[]> {
    const test = await prisma.aBTest.findUnique({ where: { id: testId } });
    if (!test) return [];

    const results: ABTestResult[] = [
      {
        variant: 'A',
        participants: test.participantsA,
        conversions: test.conversionsA,
        conversionRate: test.conversionRateA,
        significance: 0
      },
      {
        variant: 'B',
        participants: test.participantsB,
        conversions: test.conversionsB,
        conversionRate: test.conversionRateB,
        significance: 0
      }
    ];

    if (test.variantC) {
      results.push({
        variant: 'C',
        participants: test.participantsC,
        conversions: test.conversionsC,
        conversionRate: test.conversionRateC,
        significance: 0
      });
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
    results.forEach((result, index) => {
      if (index > 0) {
        result.significance = this.calculateSignificance(
          results[0], // –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç A
          result
        );
      }
    });

    return results;
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
  private calculateSignificance(control: ABTestResult, variant: ABTestResult): number {
    // –ü—Ä–æ—Å—Ç–∞—è z-test —Ñ–æ—Ä–º—É–ª–∞
    const p1 = control.conversionRate;
    const p2 = variant.conversionRate;
    const n1 = control.participants;
    const n2 = variant.participants;

    if (n1 < 30 || n2 < 30) return 0; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö

    const p = (control.conversions + variant.conversions) / (n1 + n2);
    const se = Math.sqrt(p * (1 - p) * (1/n1 + 1/n2));

    if (se === 0) return 0;

    const z = Math.abs(p1 - p2) / se;

    // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è z-score –≤ p-value
    const pValue = 2 * (1 - this.normalCDF(Math.abs(z)));
    return Math.max(0, Math.min(1, 1 - pValue));
  }

  // –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è)
  private normalCDF(x: number): number {
    const t = 1 / (1 + 0.2316419 * Math.abs(x));
    const d = 0.3989423 * Math.exp(-x * x / 2);
    const prob = d * t * (0.3193815 + t * (-0.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))));
    return x > 0 ? 1 - prob : prob;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ç–µ—Å—Ç–∞
  async determineWinner(testId: string, minSignificance: number = 0.95): Promise<string | null> {
    const results = await this.getTestResults(testId);

    let winner = results[0]; // –±–∞–∑–æ–≤—ã–π A
    let hasSignificantWinner = false;

    results.forEach(result => {
      if (result.conversionRate > winner.conversionRate &&
          result.significance >= minSignificance) {
        winner = result;
        hasSignificantWinner = true;
      }
    });

    if (hasSignificantWinner) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ
      await prisma.aBTest.update({
        where: { id: testId },
        data: { winner: winner.variant }
      });

      console.log(`üèÜ Test winner determined: Variant ${winner.variant} with ${(winner.conversionRate * 100).toFixed(2)}% conversion rate`);
      return winner.variant;
    }

    return null; // –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
  async stopTest(testId: string): Promise<void> {
    await prisma.aBTest.update({
      where: { id: testId },
      data: {
        isActive: false,
        endDate: new Date()
      }
    });

    const winner = await this.determineWinner(testId);
    if (winner) {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª—É—á—à–∏–π –ø—Ä–æ–º–ø—Ç
      await this.applyWinningPrompt(testId, winner);
    }
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–∏–≥—Ä–∞–≤—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  private async applyWinningPrompt(testId: string, winner: string): Promise<void> {
    const test = await prisma.aBTest.findUnique({ where: { id: testId } });
    if (!test) return;

    const winningPrompt = this.getPromptForVariant(test, winner);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞
    await prisma.promptOptimization.create({
      data: {
        promptType: 'qualification', // –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        promptText: winningPrompt,
        version: `ab_test_${testId}_${winner}`,
        conversionRate: winner === 'A' ? test.conversionRateA :
                       winner === 'B' ? test.conversionRateB : test.conversionRateC,
        usageCount: winner === 'A' ? test.participantsA :
                   winner === 'B' ? test.participantsB : test.participantsC,
        successfulUses: winner === 'A' ? test.conversionsA :
                       winner === 'B' ? test.conversionsB : test.conversionsC,
        isActive: true
      }
    });

    console.log(`‚úÖ Winning prompt applied from test ${testId}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  async getActiveTests(): Promise<any[]> {
    return await prisma.aBTest.findMany({
      where: { isActive: true },
      orderBy: { createdAt: 'desc' }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (fallback)
  private getDefaultPrompt(): string {
    return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ –∫—É—Ä—Å–∞–º–∏, –≤–µ—Ä–Ω–æ?

–î–∞–≤–∞–π—Ç–µ —è –≤–∞–º –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∫—É—Ä—Å –±—É–¥–µ—Ç –≤–∞–º –ø–æ–ª–µ–∑–µ–Ω, –∑–∞—Ç–µ–º —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, —Ç–æ –ø–æ–º–æ–≥—É –∑–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ, —Ö–æ—Ä–æ—à–æ?

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:
- –ö–∞–∫ –¥–∞–≤–Ω–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å—Ç—Ä–∏–∂–∫–∞–º–∏/–∫–æ–ª–æ—Ä–∏—Å—Ç–∏–∫–æ–π?
- –ß–µ–≥–æ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ?

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –≤—Å–µ, —á—Ç–æ –ø–æ—Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º.`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  async createDefaultTests(): Promise<void> {
    // –¢–µ—Å—Ç 1: –†–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é
    await this.createABTest(
      'greeting_approach',
      '–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –ø–µ—Ä–≤–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É',
      [
        {
          name: 'Formal',
          prompt: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ –∫—É—Ä—Å–∞–º–∏, –≤–µ—Ä–Ω–æ? –î–∞–≤–∞–π—Ç–µ —è –≤–∞–º –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤...',
          weight: 50
        },
        {
          name: 'Friendly',
          prompt: '–ü—Ä–∏–≤–µ—Ç! üëã –ö–∞–∫–æ–π –∫–ª–∞—Å—Å–Ω—ã–π –≤—ã–±–æ—Ä - –∏–∑—É—á–∞—Ç—å –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–µ–ª–æ –∫ –Ω–∞–º?',
          weight: 50
        }
      ]
    );

    // –¢–µ—Å—Ç 2: –†–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ü–µ–Ω—ã
    await this.createABTest(
      'pricing_presentation',
      '–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∞—á—É —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
      [
        {
          name: 'Direct',
          prompt: '–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 39.000‚ÇΩ. –ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å—Å—Ä–æ—á–∫–∏.',
          weight: 33
        },
        {
          name: 'Value_First',
          prompt: '–ó–∞ 2 –º–µ—Å—è—Ü–∞ –≤—ã –æ—Å–≤–æ–∏—Ç–µ –≤—Å–µ 11 –±–∞–∑–æ–≤—ã—Ö —Ñ–æ—Ä–º —Å—Ç—Ä–∏–∂–µ–∫ –∏ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–Ω—è—Ç—å —Ü–µ–Ω—É –Ω–∞ —Å–≤–æ–∏ —É—Å–ª—É–≥–∏. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –∫—É—Ä—Å - 39.000‚ÇΩ.',
          weight: 33
        },
        {
          name: 'Social_Proof',
          prompt: '–£–∂–µ 5000+ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫—É—Ä—Å –∏ —É–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ—Ö–æ–¥ –Ω–∞ 40-60%. –°—Ç–æ–∏–º–æ—Å—Ç—å 39.000‚ÇΩ, –Ω–æ –æ–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Ä–∞–±–æ—Ç—ã.',
          weight: 34
        }
      ]
    );

    console.log('üß™ Default A/B tests created');
  }
}
