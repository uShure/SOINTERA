import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export interface SessionMetrics {
  sessionId: string;
  startTime: Date;
  endTime?: Date;
  customerId: string;
  funnelStage: string;
  messagesCount: number;
  outcome?: string;
  abTestGroup?: string;
}

export interface ConversionEvent {
  customerId: string;
  conversationId: string;
  stage: string;
  action: string;
  courseInterest?: string;
  value?: number;
}

export class AnalyticsService {
  private sessionStore = new Map<string, SessionMetrics>();

  // –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
  async startSession(customerId: string, conversationId: string): Promise<string> {
    const sessionId = `${customerId}_${Date.now()}`;

    const session: SessionMetrics = {
      sessionId,
      startTime: new Date(),
      customerId,
      funnelStage: 'initial',
      messagesCount: 0
    };

    this.sessionStore.set(sessionId, session);
    return sessionId;
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤–æ—Ä–æ–Ω–∫–µ
  async trackFunnelProgress(
    customerId: string,
    conversationId: string,
    stage: string,
    data?: any
  ): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
      await prisma.conversation.update({
        where: { id: conversationId },
        data: {
          funnelStage: stage,
          updatedAt: new Date()
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
      const session = Array.from(this.sessionStore.values())
        .find(s => s.customerId === customerId);

      if (session) {
        session.funnelStage = stage;
        session.messagesCount++;
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
      await this.trackConversionEvent({
        customerId,
        conversationId,
        stage,
        action: 'funnel_progress',
        ...data
      });

      console.log(`üîÑ Funnel progress: ${customerId} ‚Üí ${stage}`);
    } catch (error) {
      console.error('Error tracking funnel progress:', error);
    }
  }

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  async trackConversionEvent(event: ConversionEvent): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      await this.updateDailyMetrics(event);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞
      await this.saveCustomerAnalytics(event);

      console.log(`üìä Conversion event: ${event.action} for ${event.customerId}`);
    } catch (error) {
      console.error('Error tracking conversion event:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
  private async updateDailyMetrics(event: ConversionEvent): Promise<void> {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const metrics = await prisma.funnelMetrics.findFirst({
      where: {
        date: {
          gte: today,
          lt: new Date(today.getTime() + 24 * 60 * 60 * 1000)
        }
      }
    });

    if (metrics) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
      const updateData: any = {};

      switch (event.stage) {
        case 'qualification':
          updateData.qualificationStage = { increment: 1 };
          break;
        case 'presentation':
          updateData.presentationStage = { increment: 1 };
          break;
        case 'pricing':
          updateData.pricingStage = { increment: 1 };
          break;
        case 'objection':
          updateData.objectionStage = { increment: 1 };
          break;
        case 'closing':
          updateData.closingStage = { increment: 1 };
          break;
        case 'conversion':
          updateData.conversions = { increment: 1 };
          break;
      }

      if (event.action === 'session_start') {
        updateData.totalVisitors = { increment: 1 };
      }

      await prisma.funnelMetrics.update({
        where: { id: metrics.id },
        data: updateData
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      await prisma.funnelMetrics.create({
        data: {
          date: today,
          totalVisitors: event.action === 'session_start' ? 1 : 0,
          qualificationStage: event.stage === 'qualification' ? 1 : 0,
          presentationStage: event.stage === 'presentation' ? 1 : 0,
          pricingStage: event.stage === 'pricing' ? 1 : 0,
          objectionStage: event.stage === 'objection' ? 1 : 0,
          closingStage: event.stage === 'closing' ? 1 : 0,
          conversions: event.action === 'conversion' ? 1 : 0
        }
      });
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
  private async saveCustomerAnalytics(event: ConversionEvent): Promise<void> {
    const session = Array.from(this.sessionStore.values())
      .find(s => s.customerId === event.customerId);

    if (!session) return;

    const sessionDuration = session.endTime
      ? Math.floor((session.endTime.getTime() - session.startTime.getTime()) / 1000)
      : Math.floor((Date.now() - session.startTime.getTime()) / 1000);

    await prisma.customerAnalytics.create({
      data: {
        customerId: event.customerId,
        sessionDuration,
        messagesExchanged: session.messagesCount,
        funnelCompletionRate: this.calculateFunnelCompletion(session.funnelStage),
        responsePattern: this.analyzeResponsePattern(event.customerId),
        interestLevel: this.calculateInterestLevel(event),
        finalOutcome: event.action,
        courseInterest: event.courseInterest,
        priceReaction: event.stage === 'pricing' ? 'interested' : undefined
      }
    });
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏
  private calculateFunnelCompletion(stage: string): number {
    const stageWeights: Record<string, number> = {
      'initial': 0,
      'qualification': 20,
      'presentation': 40,
      'pricing': 60,
      'objection': 80,
      'closing': 100
    };
    return stageWeights[stage] || 0;
  }

  // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
  private analyzeResponsePattern(customerId: string): string {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    return 'standard';
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
  private calculateInterestLevel(event: ConversionEvent): number {
    let interest = 3; // –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å

    if (event.stage === 'presentation') interest += 1;
    if (event.stage === 'pricing') interest += 1;
    if (event.action === 'conversion') interest = 5;
    if (event.action === 'objection') interest -= 0.5;

    return Math.max(1, Math.min(5, interest));
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  async endSession(customerId: string, outcome: string): Promise<void> {
    const session = Array.from(this.sessionStore.values())
      .find(s => s.customerId === customerId);

    if (session) {
      session.endTime = new Date();
      session.outcome = outcome;

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
      this.sessionStore.delete(session.sessionId);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤–æ—Ä–æ–Ω–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
  async getFunnelMetrics(days: number = 7): Promise<any> {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);

    const metrics = await prisma.funnelMetrics.findMany({
      where: {
        date: {
          gte: startDate
        }
      },
      orderBy: {
        date: 'desc'
      }
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const totals = metrics.reduce((acc, m) => ({
      totalVisitors: acc.totalVisitors + m.totalVisitors,
      qualificationStage: acc.qualificationStage + m.qualificationStage,
      presentationStage: acc.presentationStage + m.presentationStage,
      pricingStage: acc.pricingStage + m.pricingStage,
      objectionStage: acc.objectionStage + m.objectionStage,
      closingStage: acc.closingStage + m.closingStage,
      conversions: acc.conversions + m.conversions
    }), {
      totalVisitors: 0,
      qualificationStage: 0,
      presentationStage: 0,
      pricingStage: 0,
      objectionStage: 0,
      closingStage: 0,
      conversions: 0
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
    const conversionRates = {
      qualificationRate: totals.totalVisitors > 0 ? totals.qualificationStage / totals.totalVisitors : 0,
      presentationRate: totals.qualificationStage > 0 ? totals.presentationStage / totals.qualificationStage : 0,
      pricingRate: totals.presentationStage > 0 ? totals.pricingStage / totals.presentationStage : 0,
      objectionRate: totals.pricingStage > 0 ? totals.objectionStage / totals.pricingStage : 0,
      closingRate: totals.objectionStage > 0 ? totals.closingStage / totals.objectionStage : 0,
      overallConversion: totals.totalVisitors > 0 ? totals.conversions / totals.totalVisitors : 0
    };

    return {
      metrics,
      totals,
      conversionRates,
      period: `${days} days`
    };
  }

  // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
  async analyzePromptPerformance(): Promise<any> {
    const prompts = await prisma.promptOptimization.findMany({
      where: { isActive: true }
    });

    return prompts.map(prompt => ({
      ...prompt,
      conversionRate: prompt.usageCount > 0 ? prompt.successfulUses / prompt.usageCount : 0,
      escalationRate: prompt.usageCount > 0 ? prompt.managerEscalations / prompt.usageCount : 0,
      avgEngagement: prompt.avgEngagement,
      recommendation: this.generatePromptRecommendation(prompt)
    }));
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–º–ø—Ç—É
  private generatePromptRecommendation(prompt: any): string {
    if (prompt.conversionRate > 0.7) return '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
    if (prompt.conversionRate > 0.5) return '–•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
    if (prompt.conversionRate > 0.3) return '–¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏';
    return '–ù—É–∂–Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞';
  }

  // –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
  async findSuccessPatterns(): Promise<any> {
    const successfulConversations = await prisma.conversation.findMany({
      where: {
        outcome: 'purchased'
      },
      include: {
        messages: true,
        customer: true
      }
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const patterns = {
      avgMessagesBeforeConversion: 0,
      avgTimeToConversion: 0,
      commonCustomerTypes: {} as Record<string, number>,
      commonCourseInterests: {} as Record<string, number>,
      successfulPromptTypes: {} as Record<string, number>
    };

    successfulConversations.forEach(conv => {
      patterns.avgMessagesBeforeConversion += conv.messages.length;
      if (conv.conversionTime) patterns.avgTimeToConversion += conv.conversionTime;

      const customerType = conv.customer.classification || 'unknown';
      patterns.commonCustomerTypes[customerType] = (patterns.commonCustomerTypes[customerType] || 0) + 1;
    });

    patterns.avgMessagesBeforeConversion /= successfulConversations.length || 1;
    patterns.avgTimeToConversion /= successfulConversations.length || 1;

    return patterns;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
  async generateLearningInsights(): Promise<void> {
    try {
      const patterns = await this.findSuccessPatterns();
      const promptPerformance = await this.analyzePromptPerformance();
      const funnelData = await this.getFunnelMetrics(30);

      // –ò–Ω—Å–∞–π—Ç –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
      if (patterns.avgMessagesBeforeConversion > 0) {
        await prisma.learningInsights.create({
          data: {
            insightType: 'pattern',
            category: 'customer_behavior',
            title: '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∏–∞–ª–æ–≥–∞',
            description: `–£—Å–ø–µ—à–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ ${Math.round(patterns.avgMessagesBeforeConversion)} —Å–æ–æ–±—â–µ–Ω–∏–π`,
            data: JSON.stringify(patterns),
            confidence: 0.8,
            recommendation: `–§–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ –∫ ${Math.round(patterns.avgMessagesBeforeConversion)} —Å–æ–æ–±—â–µ–Ω–∏—é`,
            expectedImpact: 0.15
          }
        });
      }

      // –ò–Ω—Å–∞–π—Ç –ø–æ –≤–æ—Ä–æ–Ω–∫–µ
      if (funnelData.conversionRates.presentationRate < 0.6) {
        await prisma.learningInsights.create({
          data: {
            insightType: 'trend',
            category: 'funnel_optimization',
            title: '–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
            description: `–¢–æ–ª—å–∫–æ ${Math.round(funnelData.conversionRates.presentationRate * 100)}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –∫ —ç—Ç–∞–ø—É —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è`,
            data: JSON.stringify(funnelData.conversionRates),
            confidence: 0.9,
            recommendation: '–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∫—É—Ä—Å–æ–≤',
            expectedImpact: 0.25
          }
        });
      }

      console.log('‚ú® Learning insights generated successfully');
    } catch (error) {
      console.error('Error generating insights:', error);
    }
  }
}
