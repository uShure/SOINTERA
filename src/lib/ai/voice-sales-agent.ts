import { SalesAgent } from './sales-agent';
import { VoiceService } from '../voice/voice-service';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π AI –ø—Ä–æ–¥–∞–∂–Ω–∏–∫ SOINTERA
 * 
 * –†–∞—Å—à–∏—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π SalesAgent –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:
 * - –û—Ç–≤–µ—á–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 * - –ü–æ–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å)
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
 */
export class VoiceSalesAgent extends SalesAgent {
  private voiceService: VoiceService;
  private voiceEnabled: boolean = true;
  private autoVoiceResponse: boolean = true; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º

  constructor() {
    super();
    this.voiceService = new VoiceService();
  }

  /**
   * üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
   */
  async processIncomingMessage(message: string | Buffer, context: CustomerContext, isVoice: boolean = false): Promise<{
    response: string;
    voiceResponse?: Buffer;
    callManager: boolean;
    classification?: string;
    managerInfo?: {
      customerName: string;
      customerUsername?: string;
      request: string;
      classification?: string;
    };
  }> {
    let textMessage = message as string;

    // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
    if (isVoice && Buffer.isBuffer(message)) {
      try {
        textMessage = await this.voiceService.speechToText(message);
        console.log('üéß –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ—á—å:', textMessage);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', error);
        textMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º?';
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π SalesAgent
    const result = await super.processMessage(textMessage, context);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º
    const shouldRespondWithVoice = this.shouldRespondWithVoice(context, result.response);

    if (shouldRespondWithVoice && this.voiceEnabled) {
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        const voiceBuffer = await this.generateVoiceResponse(result.response, context);
        result.voiceResponse = voiceBuffer;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º
      }
    }

    return result;
  }

  /**
   * üó£Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  private async generateVoiceResponse(text: string, context: CustomerContext): Promise<Buffer> {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const voiceOptions = this.getVoiceOptionsForContext(context);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∞—É–¥–∏–æ
      let audioBuffer = await this.voiceService.textToSpeech(text, voiceOptions);
      
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è Telegram
      audioBuffer = await this.voiceService.optimizeForTelegram(audioBuffer);
      
      return audioBuffer;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * üé≠ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–ª–æ—Å–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private getVoiceOptionsForContext(context: CustomerContext): {
    voice: string;
    language: string;
    speed: number;
    pitch: number;
  } {
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SOINTERA
    const baseOptions = {
      voice: 'ru-RU-Standard-A',
      language: 'ru-RU',
      speed: 1.0,
      pitch: 0.0
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (context.classification === 'beginner') {
      // –î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ - –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏ —á–µ—Ç—á–µ
      return {
        ...baseOptions,
        speed: 0.9,
        pitch: -0.5 // –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      };
    } else if (context.classification === 'experienced') {
      // –î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö - –±—ã—Å—Ç—Ä–µ–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–µ–µ
      return {
        ...baseOptions,
        speed: 1.1,
        pitch: 0.2
      };
    } else if (context.classification === 'ready_to_buy') {
      // –î–ª—è –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø–æ–∫—É–ø–∫–µ - —ç–Ω–µ—Ä–≥–∏—á–Ω–æ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ
      return {
        ...baseOptions,
        speed: 1.05,
        pitch: 0.3
      };
    }

    return baseOptions;
  }

  /**
   * üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º
   */
  private shouldRespondWithVoice(context: CustomerContext, response: string): boolean {
    if (!this.autoVoiceResponse) return false;

    // –í—Å–µ–≥–¥–∞ –≥–æ–ª–æ—Å–æ–º –¥–ª—è –≤–∞–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if (response.includes('–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä —Å –Ω—É–ª—è') || 
        response.includes('–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞') ||
        response.includes('–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ')) {
      return true;
    }

    // –ì–æ–ª–æ—Å–æ–º –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    if (response.length > 100) {
      return true;
    }

    // –ì–æ–ª–æ—Å–æ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
    if (response.includes('‚ÇΩ') || response.includes('—Ä—É–±')) {
      return true;
    }

    // –ì–æ–ª–æ—Å–æ–º –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Å –¥–∞—Ç–∞–º–∏
    if (response.includes('—Å–µ–Ω—Ç—è–±—Ä—å') || response.includes('–æ–∫—Ç—è–±—Ä—å') || 
        response.includes('–Ω–æ—è–±—Ä—å') || response.includes('–¥–µ–∫–∞–±—Ä—å')) {
      return true;
    }

    return false;
  }

  /**
   * üé§ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
   */
  toggleVoice(enabled: boolean): void {
    this.voiceEnabled = enabled;
    console.log(`üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);
  }

  /**
   * üîÑ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
   */
  toggleAutoVoice(enabled: boolean): void {
    this.autoVoiceResponse = enabled;
    console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);
  }

  /**
   * üéµ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
   */
  async getAvailableVoices(): Promise<string[]> {
    return await this.voiceService.getAvailableVoices();
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
   */
  getVoiceStats() {
    return this.voiceService.getStats();
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  async cleanupVoice(): Promise<void> {
    await this.voiceService.cleanup();
  }

  /**
   * üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
   */
  async generatePersonalizedGreeting(context: CustomerContext): Promise<{
    text: string;
    voice?: Buffer;
  }> {
    const greeting = this.getPersonalizedGreeting(context);
    
    if (this.voiceEnabled) {
      try {
        const voiceBuffer = await this.generateVoiceResponse(greeting, context);
        return { text: greeting, voice: voiceBuffer };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
      }
    }

    return { text: greeting };
  }

  /**
   * üëã –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
   */
  private getPersonalizedGreeting(context: CustomerContext): string {
    const time = new Date().getHours();
    let timeGreeting = '';

    if (time >= 5 && time < 12) {
      timeGreeting = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
    } else if (time >= 12 && time < 18) {
      timeGreeting = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å';
    } else {
      timeGreeting = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
    }

    let nameGreeting = '';
    if (context.firstName) {
      nameGreeting = `, ${context.firstName}`;
    } else if (context.username) {
      nameGreeting = `, @${context.username}`;
    }

    return `${timeGreeting}${nameGreeting}! üëã 

–Ø - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —à–∫–æ–ª—ã –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ SOINTERA. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!

–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —è –ø–æ–Ω–∏–º–∞—é –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞. 

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`;
  }

  /**
   * üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å —ç–º–æ—Ü–∏—è–º–∏
   */
  async generateEmotionalVoiceResponse(text: string, emotion: 'friendly' | 'professional' | 'enthusiastic' | 'calm'): Promise<Buffer> {
    const voiceOptions = this.getVoiceOptionsForEmotion(emotion);
    let audioBuffer = await this.voiceService.textToSpeech(text, voiceOptions);
    audioBuffer = await this.voiceService.optimizeForTelegram(audioBuffer);
    return audioBuffer;
  }

  /**
   * üé≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–π
   */
  private getVoiceOptionsForEmotion(emotion: string): {
    voice: string;
    language: string;
    speed: number;
    pitch: number;
  } {
    const baseOptions = {
      voice: 'ru-RU-Standard-A',
      language: 'ru-RU'
    };

    switch (emotion) {
      case 'friendly':
        return { ...baseOptions, speed: 1.0, pitch: 0.0 };
      case 'professional':
        return { ...baseOptions, speed: 1.1, pitch: -0.2 };
      case 'enthusiastic':
        return { ...baseOptions, speed: 1.15, pitch: 0.3 };
      case 'calm':
        return { ...baseOptions, speed: 0.9, pitch: -0.1 };
      default:
        return { ...baseOptions, speed: 1.0, pitch: 0.0 };
    }
  }
}
