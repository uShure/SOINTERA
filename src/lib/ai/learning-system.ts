import { SalesAgent } from './sales-agent';
import { AnalyticsService } from './analytics-service';
import { ABTestingService } from './ab-testing-service';
import { LearningEngine } from './learning-engine';

/**
 * üß† SMART LEARNING SYSTEM
 *
 * –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è AI –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ SOINTERA
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç: –∞–Ω–∞–ª–∏—Ç–∏–∫—É, A/B —Ç–µ—Å—Ç—ã, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
 */
export class LearningSytem {
  private salesAgent: SalesAgent;
  private analyticsService: AnalyticsService;
  private abTestingService: ABTestingService;
  private learningEngine: LearningEngine;

  constructor() {
    this.salesAgent = new SalesAgent();
    this.analyticsService = new AnalyticsService();
    this.abTestingService = new ABTestingService();
    this.learningEngine = new LearningEngine();
  }

  // üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
  async initialize(): Promise<void> {
    console.log('üß† Initializing Smart Learning System...');

    try {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ A/B —Ç–µ—Å—Ç—ã
      await this.abTestingService.createDefaultTests();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      console.log('üìä Analytics system ready');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è
      await this.learningEngine.performLearningCycle();

      console.log('‚úÖ Smart Learning System initialized successfully');
    } catch (error) {
      console.error('‚ùå Error initializing learning system:', error);
    }
  }

  // üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async getPerformanceSummary(): Promise<any> {
    const [
      funnelMetrics,
      promptPerformance,
      activeTests,
      insights
    ] = await Promise.all([
      this.analyticsService.getFunnelMetrics(7),
      this.analyticsService.analyzePromptPerformance(),
      this.abTestingService.getActiveTests(),
      this.learningEngine.getDeveloperRecommendations()
    ]);

    return {
      summary: {
        totalVisitors: funnelMetrics.totals.totalVisitors,
        overallConversion: `${(funnelMetrics.conversionRates.overallConversion * 100).toFixed(1)}%`,
        activeABTests: activeTests.length,
        pendingRecommendations: insights.length
      },
      funnelHealth: {
        qualificationRate: `${(funnelMetrics.conversionRates.qualificationRate * 100).toFixed(1)}%`,
        presentationRate: `${(funnelMetrics.conversionRates.presentationRate * 100).toFixed(1)}%`,
        pricingRate: `${(funnelMetrics.conversionRates.pricingRate * 100).toFixed(1)}%`,
        closingRate: `${(funnelMetrics.conversionRates.closingRate * 100).toFixed(1)}%`
      },
      topRecommendations: insights.slice(0, 3),
      activeExperiments: activeTests.map(test => ({
        name: test.name,
        participants: test.participantsA + test.participantsB + test.participantsC,
        status: test.isActive ? 'Running' : 'Completed'
      }))
    };
  }

  // üéØ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
  async startExperiment(experimentType: 'greeting' | 'pricing' | 'objection'): Promise<string> {
    switch (experimentType) {
      case 'greeting':
        return await this.abTestingService.createABTest(
          `greeting_experiment_${Date.now()}`,
          '–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é',
          [
            {
              name: 'Professional',
              prompt: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ –∫—É—Ä—Å–∞–º–∏, –≤–µ—Ä–Ω–æ? –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.',
              weight: 50
            },
            {
              name: 'Friendly',
              prompt: '–ü—Ä–∏–≤–µ—Ç! üëã –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö?',
              weight: 50
            }
          ]
        );

      case 'pricing':
        return await this.abTestingService.createABTest(
          `pricing_experiment_${Date.now()}`,
          '–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Ü–µ–Ω—ã',
          [
            {
              name: 'Value_First',
              prompt: '–≠—Ç–æ—Ç –∫—É—Ä—Å –ø–æ–º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à –¥–æ—Ö–æ–¥ –Ω–∞ 40-60%. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 39.000‚ÇΩ.',
              weight: 50
            },
            {
              name: 'Price_First',
              prompt: '–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ 39.000‚ÇΩ. –î–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤ –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.',
              weight: 50
            }
          ]
        );

      case 'objection':
        return await this.abTestingService.createABTest(
          `objection_experiment_${Date.now()}`,
          '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
          [
            {
              name: 'Empathy_First',
              prompt: '–ü–æ–Ω–∏–º–∞—é, —É –≤—Å–µ—Ö —Å–µ–π—á–∞—Å –≤—ã—Å–æ–∫–∏–π —Ç–µ–º–ø –∂–∏–∑–Ω–∏. –ù–∞—à –∫—É—Ä—Å –∫–∞–∫ —Ä–∞–∑ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –ª—é–¥–µ–π...',
              weight: 50
            },
            {
              name: 'Facts_First',
              prompt: '–ö—É—Ä—Å –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ–≥–æ 2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é - —ç—Ç–æ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–¥–∏–Ω —Ñ–∏–ª—å–º. –ü—Ä–∏ —ç—Ç–æ–º...',
              weight: 50
            }
          ]
        );

      default:
        throw new Error('Unknown experiment type');
    }
  }

  // üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
  async getDailySummary(): Promise<string> {
    const summary = await this.getPerformanceSummary();

    return `
üß† AI –ü–†–û–î–ê–ñ–ù–ò–ö - –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê

üìà –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
‚Ä¢ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: ${summary.summary.totalVisitors}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${summary.summary.overallConversion}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${summary.summary.activeABTests}

üéØ –ó–î–û–†–û–í–¨–ï –í–û–†–û–ù–ö–ò:
‚Ä¢ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: ${summary.funnelHealth.qualificationRate}
‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: ${summary.funnelHealth.presentationRate}
‚Ä¢ –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ${summary.funnelHealth.pricingRate}
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–∏–µ: ${summary.funnelHealth.closingRate}

üí° –¢–û–ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
${summary.topRecommendations.map(r => `‚Ä¢ ${r.title} (–æ–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: ${r.expectedImpact})`).join('\n')}

üß™ –ê–ö–¢–ò–í–ù–´–ï –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–´:
${summary.activeExperiments.map(e => `‚Ä¢ ${e.name}: ${e.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`).join('\n')}
`;
  }

  // ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
  async quickActions(): Promise<any> {
    return {
      // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è
      runLearningCycle: async () => {
        console.log('üîÑ Starting learning cycle...');
        await this.learningEngine.performLearningCycle();
        return '‚úÖ Learning cycle completed';
      },

      // –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ –∏–Ω—Å–∞–π—Ç—ã
      getTopInsights: async () => {
        const insights = await this.learningEngine.getDeveloperRecommendations();
        return insights.slice(0, 5);
      },

      // –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–ª–æ—Ö–∏–µ —Ç–µ—Å—Ç—ã
      stopPoorPerformingTests: async () => {
        const activeTests = await this.abTestingService.getActiveTests();
        let stopped = 0;

        for (const test of activeTests) {
          const results = await this.abTestingService.getTestResults(test.id);
          const totalParticipants = results.reduce((sum, r) => sum + r.participants, 0);

          // –ï—Å–ª–∏ —Ç–µ—Å—Ç –¥–ª–∏—Ç—Å—è –¥–æ–ª–≥–æ, –Ω–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è –Ω–∏–∑–∫–∞—è
          if (totalParticipants > 50) {
            const avgConversion = results.reduce((sum, r) => sum + r.conversionRate, 0) / results.length;

            if (avgConversion < 0.1) { // –ú–µ–Ω–µ–µ 10% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
              await this.abTestingService.stopTest(test.id);
              stopped++;
            }
          }
        }

        return `üõë Stopped ${stopped} poor performing tests`;
      },

      // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
      applyBestPractices: async () => {
        await this.learningEngine.performLearningCycle();
        const insights = await this.learningEngine.getDeveloperRecommendations();
        const highImpact = insights.filter(i => parseFloat(i.expectedImpact.replace('%', '')) > 15);

        return {
          foundInsights: highImpact.length,
          recommendations: highImpact.map(i => ({
            title: i.title,
            action: i.recommendation,
            impact: i.expectedImpact
          }))
        };
      }
    };
  }

  // üéì –û–±—É—á–µ–Ω–∏–µ AI –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async trainOnNewData(): Promise<void> {
    console.log('üéì Training AI on new conversation data...');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    await this.learningEngine.performLearningCycle();

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
    const recommendations = await this.learningEngine.getDeveloperRecommendations();

    console.log(`‚ú® Generated ${recommendations.length} improvement recommendations`);
  }

  // üì± –ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
  getSalesAgent(): SalesAgent {
    return this.salesAgent;
  }

  getAnalytics(): AnalyticsService {
    return this.analyticsService;
  }

  getABTesting(): ABTestingService {
    return this.abTestingService;
  }

  getLearningEngine(): LearningEngine {
    return this.learningEngine;
  }
}
