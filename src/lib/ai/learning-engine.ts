import { PrismaClient } from '@prisma/client';
import { AnalyticsService } from './analytics-service';
import { ABTestingService } from './ab-testing-service';

const prisma = new PrismaClient();

export interface LearningPattern {
  pattern: string;
  confidence: number;
  examples: string[];
  recommendation: string;
  impact: number;
}

export interface CustomerSegment {
  name: string;
  characteristics: string[];
  size: number;
  conversionRate: number;
  preferredApproach: string;
}

export class LearningEngine {
  private analyticsService: AnalyticsService;
  private abTestingService: ABTestingService;

  constructor() {
    this.analyticsService = new AnalyticsService();
    this.abTestingService = new ABTestingService();
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
  async performLearningCycle(): Promise<void> {
    console.log('üß† Starting learning cycle...');

    try {
      // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
      const successPatterns = await this.analyzeSuccessPatterns();

      // 2. –°–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
      const customerSegments = await this.segmentCustomers();

      // 3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
      const promptOptimizations = await this.optimizePrompts();

      // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã
      const insights = await this.generateActionableInsights(
        successPatterns,
        customerSegments,
        promptOptimizations
      );

      // 5. –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
      await this.applyAutomaticImprovements(insights);

      console.log('‚úÖ Learning cycle completed successfully');
    } catch (error) {
      console.error('‚ùå Error in learning cycle:', error);
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
  async analyzeSuccessPatterns(): Promise<LearningPattern[]> {
    const successfulConversations = await prisma.conversation.findMany({
      where: { outcome: 'purchased' },
      include: {
        messages: true,
        customer: true
      }
    });

    const patterns: LearningPattern[] = [];

    // –ü–∞—Ç—Ç–µ—Ä–Ω 1: –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
    const messageCounts = successfulConversations.map(c => c.messages.length);
    const avgMessages = messageCounts.reduce((sum, count) => sum + count, 0) / messageCounts.length;

    if (avgMessages > 0) {
      patterns.push({
        pattern: 'optimal_conversation_length',
        confidence: 0.8,
        examples: [`–£—Å–ø–µ—à–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏: ${Math.round(avgMessages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ä–µ–¥–Ω–µ–º`],
        recommendation: `–°—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ ${Math.round(avgMessages)} —Å–æ–æ–±—â–µ–Ω–∏–π`,
        impact: 0.15
      });
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —É—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö
    const successfulMessages = successfulConversations
      .flatMap(c => c.messages.filter(m => m.role === 'user'))
      .map(m => m.content.toLowerCase());

    const keywordFrequency = this.analyzeKeywords(successfulMessages);
    const topKeywords = Object.entries(keywordFrequency)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 10);

    if (topKeywords.length > 0) {
      patterns.push({
        pattern: 'success_keywords',
        confidence: 0.7,
        examples: topKeywords.map(([word, freq]) => `"${word}": ${freq} —Ä–∞–∑`),
        recommendation: '–û–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        impact: 0.12
      });
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω 3: –í—Ä–µ–º—è –¥–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    const conversionTimes = successfulConversations
      .filter(c => c.conversionTime)
      .map(c => c.conversionTime!);

    if (conversionTimes.length > 0) {
      const avgTime = conversionTimes.reduce((sum, time) => sum + time, 0) / conversionTimes.length;

      patterns.push({
        pattern: 'optimal_conversion_time',
        confidence: 0.75,
        examples: [`–°—Ä–µ–¥–Ω–∏–π –≤—Ä–µ–º—è –¥–æ –ø–æ–∫—É–ø–∫–∏: ${Math.round(avgTime)} –º–∏–Ω—É—Ç`],
        recommendation: '–ê–∫—Ç–∏–≤–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–¥–ª—è—Ç —Å —Ä–µ—à–µ–Ω–∏–µ–º',
        impact: 0.18
      });
    }

    return patterns;
  }

  // –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  private analyzeKeywords(messages: string[]): Record<string, number> {
    const keywords: Record<string, number> = {};
    const importantWords = [
      '–æ–ø—ã—Ç', '–ª–µ—Ç', '—Ä–∞–±–æ—Ç–∞—é', '–º–∞—Å—Ç–µ—Ä', '—Å–∞–ª–æ–Ω', '–∫–ª–∏–µ–Ω—Ç—ã',
      '—É—á–∏—Ç—å—Å—è', '–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '–Ω–∞–≤—ã–∫–∏', '—Ç–µ—Ö–Ω–∏–∫–∞',
      '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–∞—Å—Å—Ä–æ—á–∫–∞', '–æ–ø–ª–∞—Ç–∞',
      '–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞', '–Ω–∞—á–∞–ª–æ', '—Å—Ç–∞—Ä—Ç',
      '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–¥–∏–ø–ª–æ–º', '–ø—Ä–∞–∫—Ç–∏–∫–∞'
    ];

    messages.forEach(message => {
      importantWords.forEach(word => {
        if (message.includes(word)) {
          keywords[word] = (keywords[word] || 0) + 1;
        }
      });
    });

    return keywords;
  }

  // –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  async segmentCustomers(): Promise<CustomerSegment[]> {
    const customers = await prisma.customer.findMany({
      include: {
        conversations: true,
        analytics: true
      }
    });

    const segments: Record<string, any> = {};

    customers.forEach(customer => {
      const key = this.determineCustomerSegment(customer);

      if (!segments[key]) {
        segments[key] = {
          name: key,
          customers: [],
          totalConversions: 0,
          totalInteractions: 0
        };
      }

      segments[key].customers.push(customer);
      segments[key].totalInteractions++;

      if (customer.conversations.some(c => c.outcome === 'purchased')) {
        segments[key].totalConversions++;
      }
    });

    return Object.values(segments).map(segment => ({
      name: segment.name,
      characteristics: this.getSegmentCharacteristics(segment.name),
      size: segment.customers.length,
      conversionRate: segment.totalInteractions > 0 ? segment.totalConversions / segment.totalInteractions : 0,
      preferredApproach: this.getPreferredApproach(segment.name)
    }));
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
  private determineCustomerSegment(customer: any): string {
    const classification = customer.classification || 'unknown';
    const hasExperience = customer.totalInteractions > 3;

    if (classification === 'beginner') return 'beginners';
    if (classification === 'experienced' && hasExperience) return 'experienced_engaged';
    if (classification === 'experienced') return 'experienced_new';
    if (classification === 'ready_to_buy') return 'hot_leads';

    return 'general';
  }

  // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
  private getSegmentCharacteristics(segment: string): string[] {
    const characteristics: Record<string, string[]> = {
      beginners: ['–ù–µ—Ç –æ–ø—ã—Ç–∞', '–ò—â–µ—Ç –±–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–û—Å—Ç–æ—Ä–æ–∂–µ–Ω —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏'],
      experienced_engaged: ['–û–ø—ã—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä', '–ê–∫—Ç–∏–≤–Ω–æ –∏—â–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è', '–ì–æ—Ç–æ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'],
      experienced_new: ['–ò–º–µ–µ—Ç –æ–ø—ã—Ç', '–ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç', '–ò–∑—É—á–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã'],
      hot_leads: ['–ì–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ', '–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', '–ù—É–∂–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'],
      general: ['–û–±—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å', '–¢—Ä–µ–±—É–µ—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥']
    };

    return characteristics[segment] || ['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç'];
  }

  // –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  private getPreferredApproach(segment: string): string {
    const approaches: Record<string, string> = {
      beginners: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ',
      experienced_engaged: '–ü—Ä—è–º–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
      experienced_new: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏',
      hot_leads: '–ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ, –º–∏–Ω–∏–º—É–º –≤–æ–¥—ã',
      general: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ —Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–µ–π'
    };

    return approaches[segment] || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥';
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
  async optimizePrompts(): Promise<any[]> {
    const prompts = await prisma.promptOptimization.findMany({
      where: { isActive: true }
    });

    const optimizations = [];

    for (const prompt of prompts) {
      const analysis = await this.analyzePromptPerformance(prompt);

      if (analysis.needsOptimization) {
        const suggestion = await this.generatePromptSuggestion(prompt, analysis);
        optimizations.push(suggestion);
      }
    }

    return optimizations;
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞
  private async analyzePromptPerformance(prompt: any): Promise<any> {
    const conversionRate = prompt.usageCount > 0 ? prompt.successfulUses / prompt.usageCount : 0;
    const escalationRate = prompt.usageCount > 0 ? prompt.managerEscalations / prompt.usageCount : 0;

    return {
      needsOptimization: conversionRate < 0.3 || escalationRate > 0.5,
      conversionRate,
      escalationRate,
      issues: [
        ...(conversionRate < 0.3 ? ['–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è'] : []),
        ...(escalationRate > 0.5 ? ['–ß–∞—Å—Ç—ã–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏'] : []),
        ...(prompt.avgEngagement < 3 ? ['–ù–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å'] : [])
      ]
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–º–ø—Ç–∞
  private async generatePromptSuggestion(prompt: any, analysis: any): Promise<any> {
    let suggestions = [];

    if (analysis.conversionRate < 0.3) {
      suggestions.push('–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤');
      suggestions.push('–£–ø—Ä–æ—Å—Ç–∏—Ç—å —è–∑—ã–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
    }

    if (analysis.escalationRate > 0.5) {
      suggestions.push('–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
      suggestions.push('–ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã');
    }

    if (prompt.avgEngagement < 3) {
      suggestions.push('–°–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º');
      suggestions.push('–î–æ–±–∞–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é');
    }

    return {
      promptId: prompt.id,
      currentPerformance: analysis,
      suggestions,
      priority: this.calculateOptimizationPriority(analysis)
    };
  }

  // –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  private calculateOptimizationPriority(analysis: any): 'high' | 'medium' | 'low' {
    if (analysis.conversionRate < 0.2) return 'high';
    if (analysis.escalationRate > 0.6) return 'high';
    if (analysis.conversionRate < 0.3 || analysis.escalationRate > 0.4) return 'medium';
    return 'low';
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
  async generateActionableInsights(
    patterns: LearningPattern[],
    segments: CustomerSegment[],
    optimizations: any[]
  ): Promise<any[]> {
    const insights = [];

    // –ò–Ω—Å–∞–π—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    const bestSegment = segments.reduce((best, current) =>
      current.conversionRate > best.conversionRate ? current : best
    );

    if (bestSegment.conversionRate > 0.5) {
      insights.push({
        type: 'customer_segment',
        title: `–í—ã—Å–æ–∫–æ–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç: ${bestSegment.name}`,
        description: `–°–µ–≥–º–µ–Ω—Ç "${bestSegment.name}" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é ${(bestSegment.conversionRate * 100).toFixed(1)}%`,
        action: `–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥ –ø–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞`,
        expectedImpact: 0.2,
        priority: 'high'
      });
    }

    // –ò–Ω—Å–∞–π—Ç—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    patterns.forEach(pattern => {
      if (pattern.confidence > 0.7 && pattern.impact > 0.15) {
        insights.push({
          type: 'behavioral_pattern',
          title: `–ü–∞—Ç—Ç–µ—Ä–Ω: ${pattern.pattern}`,
          description: pattern.examples.join(', '),
          action: pattern.recommendation,
          expectedImpact: pattern.impact,
          priority: pattern.impact > 0.2 ? 'high' : 'medium'
        });
      }
    });

    // –ò–Ω—Å–∞–π—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
    const highPriorityOptimizations = optimizations.filter(opt => opt.priority === 'high');
    if (highPriorityOptimizations.length > 0) {
      insights.push({
        type: 'prompt_optimization',
        title: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`,
        description: `${highPriorityOptimizations.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∏–∑–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`,
        action: '–ó–∞–ø—É—Å—Ç–∏—Ç—å A/B —Ç–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤',
        expectedImpact: 0.25,
        priority: 'high'
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –≤ –±–∞–∑—É
    for (const insight of insights) {
      await prisma.learningInsights.create({
        data: {
          insightType: insight.type,
          category: 'auto_generated',
          title: insight.title,
          description: insight.description,
          data: JSON.stringify(insight),
          confidence: 0.85,
          recommendation: insight.action,
          expectedImpact: insight.expectedImpact
        }
      });
    }

    return insights;
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π
  async applyAutomaticImprovements(insights: any[]): Promise<void> {
    for (const insight of insights) {
      if (insight.priority === 'high' && insight.expectedImpact > 0.2) {
        await this.implementImprovement(insight);
      }
    }
  }

  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
  private async implementImprovement(insight: any): Promise<void> {
    switch (insight.type) {
      case 'prompt_optimization':
        await this.createOptimizationABTest(insight);
        break;

      case 'customer_segment':
        await this.updateSegmentationRules(insight);
        break;

      case 'behavioral_pattern':
        await this.adjustConversationFlow(insight);
        break;
    }

    console.log(`üîß Applied improvement: ${insight.title}`);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ A/B —Ç–µ—Å—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  private async createOptimizationABTest(insight: any): Promise<void> {
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç —Å –Ω–∏–∑–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    const poorPrompts = await prisma.promptOptimization.findMany({
      where: {
        isActive: true,
        conversionRate: { lt: 0.3 }
      },
      orderBy: { conversionRate: 'asc' },
      take: 1
    });

    if (poorPrompts.length > 0) {
      const originalPrompt = poorPrompts[0];
      const improvedPrompt = await this.generateImprovedPrompt(originalPrompt);

      await this.abTestingService.createABTest(
        `auto_optimization_${originalPrompt.id}`,
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ —Å –Ω–∏–∑–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π',
        [
          {
            name: 'Original',
            prompt: originalPrompt.promptText,
            weight: 50
          },
          {
            name: 'Improved',
            prompt: improvedPrompt,
            weight: 50
          }
        ]
      );
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  private async generateImprovedPrompt(originalPrompt: any): Promise<string> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
    // –ü–æ–∫–∞ –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è

    let improved = originalPrompt.promptText;

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    if (!improved.includes('!') && !improved.includes('üòä')) {
      improved = improved + ' –ë—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å! üòä';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    if (!improved.includes('—Ç—ã—Å—è—á') && !improved.includes('–º–∞—Å—Ç–µ—Ä')) {
      improved = '–ë–æ–ª–µ–µ 5000 –º–∞—Å—Ç–µ—Ä–æ–≤ —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à–∏ –∫—É—Ä—Å—ã. ' + improved;
    }

    // –î–µ–ª–∞–µ–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
    if (!improved.includes('–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ') && !improved.includes('–∏–º–µ–Ω–Ω–æ')) {
      improved = improved.replace('–∫—É—Ä—Å', '–∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –∫—É—Ä—Å');
    }

    return improved;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
  private async updateSegmentationRules(insight: any): Promise<void> {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    await prisma.learningInsights.create({
      data: {
        insightType: 'segmentation_rule',
        category: 'customer_behavior',
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏',
        description: `–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞: ${insight.title}`,
        data: JSON.stringify({
          segment: insight.title,
          newRules: insight.action
        }),
        confidence: 0.9,
        isApplied: true,
        appliedAt: new Date()
      }
    });
  }

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  private async adjustConversationFlow(insight: any): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –ª–æ–≥–∏–∫–∏
    await prisma.learningInsights.create({
      data: {
        insightType: 'flow_adjustment',
        category: 'conversation_optimization',
        title: '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∏–∞–ª–æ–≥–∞',
        description: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: ${insight.title}`,
        data: JSON.stringify(insight),
        confidence: 0.8,
        recommendation: '–í–Ω–µ–¥—Ä–∏—Ç—å –≤ –ª–æ–≥–∏–∫—É sales-agent.ts',
        isApplied: false
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
  async getDeveloperRecommendations(): Promise<any[]> {
    const insights = await prisma.learningInsights.findMany({
      where: {
        isApplied: false,
        confidence: { gte: 0.8 }
      },
      orderBy: { expectedImpact: 'desc' },
      take: 10
    });

    return insights.map(insight => ({
      title: insight.title,
      description: insight.description,
      recommendation: insight.recommendation,
      expectedImpact: `+${((insight.expectedImpact || 0) * 100).toFixed(1)}% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏`,
      confidence: `${(insight.confidence * 100).toFixed(0)}%`,
      category: insight.category,
      data: JSON.parse(insight.data || '{}')
    }));
  }

  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  async performDailyAnalysis(): Promise<void> {
    console.log('üìä Performing daily analysis...');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã
    await this.analyticsService.generateLearningInsights();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º A/B —Ç–µ—Å—Ç—ã
    const activeTests = await this.abTestingService.getActiveTests();
    for (const test of activeTests) {
      const results = await this.abTestingService.getTestResults(test.id);
      const totalParticipants = results.reduce((sum, r) => sum + r.participants, 0);

      // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      if (totalParticipants > 100) {
        await this.abTestingService.determineWinner(test.id);
      }
    }

    console.log('‚úÖ Daily analysis completed');
  }
}
