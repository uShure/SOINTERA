import { TextToSpeechClient } from '@google-cloud/text-to-speech';
import { SpeechClient } from '@google-cloud/speech';
import ffmpeg from 'fluent-ffmpeg';
import fs from 'fs';
import path from 'path';
import { promisify } from 'util';
import { exec } from 'child_process';

const execAsync = promisify(exec);

/**
 * üé§ –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 * 
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - Text-to-Speech (TTS) - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
 * - Speech-to-Text (STT) - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
 * - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤
 * - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–∞
 */
export class VoiceService {
  private ttsClient: TextToSpeechClient;
  private speechClient: SpeechClient;
  private tempDir: string;

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Cloud –∫–ª–∏–µ–Ω—Ç—ã
    this.ttsClient = new TextToSpeechClient({
      keyFilename: process.env.GOOGLE_CLOUD_KEY_FILE || undefined,
      projectId: process.env.GOOGLE_CLOUD_PROJECT_ID || undefined,
    });

    this.speechClient = new SpeechClient({
      keyFilename: process.env.GOOGLE_CLOUD_KEY_FILE || undefined,
      projectId: process.env.GOOGLE_CLOUD_PROJECT_ID || undefined,
    });

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
    this.tempDir = path.join(process.cwd(), 'temp', 'voice');
    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true });
    }
  }

  /**
   * üó£Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å (TTS)
   */
  async textToSpeech(text: string, options: {
    voice?: string;
    language?: string;
    speed?: number;
    pitch?: number;
  } = {}): Promise<Buffer> {
    try {
      const {
        voice = 'ru-RU-Standard-A',
        language = 'ru-RU',
        speed = 1.0,
        pitch = 0.0
      } = options;

      const request = {
        input: { text },
        voice: {
          languageCode: language,
          name: voice,
          ssmlGender: 'FEMALE' as const,
        },
        audioConfig: {
          audioEncoding: 'MP3' as const,
          speakingRate: speed,
          pitch: pitch,
          effectsProfileId: ['headphone-class-device'], // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–∞—É—à–Ω–∏–∫–æ–≤
        },
      };

      const [response] = await this.ttsClient.synthesizeSpeech(request);
      
      if (response.audioContent) {
        return Buffer.from(response.audioContent);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–Ω—Ç');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ TTS:', error);
      throw error;
    }
  }

  /**
   * üéß –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (STT)
   */
  async speechToText(audioBuffer: Buffer, options: {
    language?: string;
    encoding?: string;
    sampleRateHertz?: number;
  } = {}): Promise<string> {
    try {
      const {
        language = 'ru-RU',
        encoding = 'MP3',
        sampleRateHertz = 16000
      } = options;

      const request = {
        audio: {
          content: audioBuffer.toString('base64'),
        },
        config: {
          encoding: encoding as any,
          sampleRateHertz,
          languageCode: language,
          enableAutomaticPunctuation: true,
          model: 'latest_long', // –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞—É–¥–∏–æ
        },
      };

      const [response] = await this.speechClient.recognize(request);
      
      if (response.results && response.results.length > 0) {
        const transcript = response.results
          .map(result => result.alternatives?.[0]?.transcript)
          .filter(Boolean)
          .join(' ');
        
        return transcript;
      } else {
        return '';
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ STT:', error);
      throw error;
    }
    }

  /**
   * üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  async convertAudio(inputBuffer: Buffer, outputFormat: 'mp3' | 'ogg' | 'wav' = 'mp3'): Promise<Buffer> {
    return new Promise((resolve, reject) => {
      const inputPath = path.join(this.tempDir, `input_${Date.now()}.tmp`);
      const outputPath = path.join(this.tempDir, `output_${Date.now()}.${outputFormat}`);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π –±—É—Ñ–µ—Ä –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.writeFileSync(inputPath, inputBuffer);

      ffmpeg(inputPath)
        .toFormat(outputFormat)
        .audioChannels(1) // –ú–æ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        .audioFrequency(16000) // –ß–∞—Å—Ç–æ—Ç–∞ –¥–ª—è STT
        .audioBitrate('64k') // –ë–∏—Ç—Ä–µ–π—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        .on('end', () => {
          try {
            const outputBuffer = fs.readFileSync(outputPath);
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            fs.unlinkSync(inputPath);
            fs.unlinkSync(outputPath);
            
            resolve(outputBuffer);
          } catch (error) {
            reject(error);
          }
        })
        .on('error', (error) => {
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
          try {
            if (fs.existsSync(inputPath)) fs.unlinkSync(inputPath);
            if (fs.existsSync(outputPath)) fs.unlinkSync(outputPath);
          } catch {}
          
          reject(error);
        })
        .save(outputPath);
    });
  }

  /**
   * üéµ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è Telegram
   */
  async optimizeForTelegram(audioBuffer: Buffer): Promise<Buffer> {
    return new Promise((resolve, reject) => {
      const inputPath = path.join(this.tempDir, `input_${Date.now()}.tmp`);
      const outputPath = path.join(this.tempDir, `optimized_${Date.now()}.mp3`);

      fs.writeFileSync(inputPath, audioBuffer);

      ffmpeg(inputPath)
        .toFormat('mp3')
        .audioChannels(1)
        .audioFrequency(22050) // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è Telegram
        .audioBitrate('48k') // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
        .audioCodec('libmp3lame')
        .audioFilters([
          'highpass=f=200', // –£–±–∏—Ä–∞–µ–º –Ω–∏–∑–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
          'lowpass=f=8000',  // –£–±–∏—Ä–∞–µ–º –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
          'volume=1.2'       // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        ])
        .on('end', () => {
          try {
            const outputBuffer = fs.readFileSync(outputPath);
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            fs.unlinkSync(inputPath);
            fs.unlinkSync(outputPath);
            
            resolve(outputBuffer);
          } catch (error) {
            reject(error);
          }
        })
        .on('error', (error) => {
          try {
            if (fs.existsSync(inputPath)) fs.unlinkSync(inputPath);
            if (fs.existsSync(outputPath)) fs.unlinkSync(outputPath);
          } catch {}
          
          reject(error);
        })
        .save(outputPath);
    });
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  async cleanup(): Promise<void> {
    try {
      const files = fs.readdirSync(this.tempDir);
      for (const file of files) {
        const filePath = path.join(this.tempDir, file);
        if (fs.statSync(filePath).isFile()) {
          fs.unlinkSync(filePath);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
    }
  }

  /**
   * üé§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
   */
  async getAvailableVoices(): Promise<string[]> {
    try {
      const [response] = await this.ttsClient.listVoices({});
      
      if (response.voices) {
        return response.voices
          .filter(voice => voice.languageCodes?.includes('ru-RU'))
          .map(voice => voice.name || '')
          .filter(Boolean);
      }
      
      return [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤:', error);
      return [];
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getStats(): {
    tempDir: string;
    tempFilesCount: number;
  } {
    try {
      const files = fs.readdirSync(this.tempDir);
      return {
        tempDir: this.tempDir,
        tempFilesCount: files.length
      };
    } catch (error) {
      return {
        tempDir: this.tempDir,
        tempFilesCount: 0
      };
    }
  }
}
