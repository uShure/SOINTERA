#!/usr/bin/env tsx

import { FreeVoiceService } from '../voice/free-voice-service';
import { FreeVoiceSalesAgent } from '../ai/free-voice-sales-agent';

/**
 * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ SOINTERA AI
 */

async function checkVoiceServices() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    const voiceService = new FreeVoiceService();
    const salesAgent = new FreeVoiceSalesAgent();
    
    console.log('‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...');
    const availability = await voiceService.checkAvailability();
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log(`  - eSpeak-ng (TTS): ${availability.espeak ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
    console.log(`  - Whisper (STT): ${availability.whisper ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
    console.log(`  - FFmpeg: ${availability.ffmpeg ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
    
    const allAvailable = availability.espeak && availability.whisper && availability.ffmpeg;
    console.log(`\nüéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${allAvailable ? '‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã!' : '‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã'}`);

    if (allAvailable) {
      console.log('\nüéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ eSpeak
      try {
        const voices = await voiceService.getAvailableVoices();
        console.log(`  - –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ eSpeak: ${voices.length}`);
        voices.slice(0, 3).forEach(voice => console.log(`    * ${voice}`));
        if (voices.length > 3) console.log(`    ... –∏ –µ—â–µ ${voices.length - 3}`);
      } catch (error) {
        console.log('  - –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤ eSpeak:', error.message);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = voiceService.getStats();
      console.log(`  - –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: ${stats.tempDir}`);
      console.log(`  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${stats.tempFilesCount}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ SalesAgent
      console.log('\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ AI SalesAgent...');
      const agentAvailability = await salesAgent.checkVoiceServicesAvailability();
      console.log(`  - –°—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞: ${agentAvailability.allAvailable ? '‚úÖ OK' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}`);
      
      console.log('\nüöÄ –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      console.log('\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ:');
      console.log('  1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: bun run start');
      console.log('  2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å: bun run voice:test');
      console.log('  3. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
      
    } else {
      console.log('\n‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:');
      
      if (!availability.espeak) {
        console.log('\nüó£Ô∏è eSpeak-ng (Text-to-Speech):');
        console.log('  macOS: brew install espeak-ng');
        console.log('  Ubuntu: sudo apt install espeak-ng');
        console.log('  Windows: —Å–∫–∞—á–∞—Ç—å —Å https://github.com/espeak-ng/espeak-ng/releases');
      }
      
      if (!availability.whisper) {
        console.log('\nüéß Whisper (Speech-to-Text):');
        console.log('  pip install openai-whisper');
        console.log('  –∏–ª–∏ conda install -c conda-forge openai-whisper');
      }
      
      if (!availability.ffmpeg) {
        console.log('\nüéµ FFmpeg (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ):');
        console.log('  macOS: brew install ffmpeg');
        console.log('  Ubuntu: sudo apt install ffmpeg');
        console.log('  Windows: —Å–∫–∞—á–∞—Ç—å —Å https://ffmpeg.org/download.html');
      }
      
      console.log('\nüìñ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–º. –≤ VOICE_SETUP_FREE.md');
    }

    // –û—á–∏—Å—Ç–∫–∞
    await voiceService.cleanup();
    console.log('\nüßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('  1. –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
    console.log('  2. –ü—Ä–æ–±–ª–µ–º—ã —Å PATH');
    console.log('  3. –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('\nüìñ –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: VOICE_SETUP_FREE.md');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkVoiceServices().catch(console.error);
